<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Felipe Blini - JavaScript Developer, Teacher and Consultant</title>
    <description>blini.io - Desenvolvimento Web e Mobile com Javascript
</description>
    <link>http://blini.io/</link>
    <atom:link href="http://blini.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 20 Nov 2016 16:26:07 -0300</pubDate>
    <lastBuildDate>Sun, 20 Nov 2016 16:26:07 -0300</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>Classes e Objetos em Javascript</title>
        <description>&lt;p&gt;O ECMAScript 2015 trouxe a implementação da palvara reservada &lt;code class=&quot;inline&quot;&gt;class&lt;/code&gt;,
porém isso não trouxe a capacidade de orientação a objetos ao JavaScript. Essa capacidade já existia desde
as primórdios da linguagem, tanto é que &lt;code class=&quot;inline&quot;&gt;class&lt;/code&gt; sempre foi
uma palavra-chave reservada, mesmo não tendo nenhuma utilidade no passado. Isso também não alterou o sistema
de orientação a objetos do JavaScript. A palavra-chave &lt;code class=&quot;inline&quot;&gt;class&lt;/code&gt; é apenas um açucar
sintático para fazermos exatamente o que já fazíamos antes: &lt;em&gt;funções construtoras de objetos&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Por isso estudar e entender o jeito antigo de criar classes, objetos e heranças é essencial para um bom
programador JavaScript pois debaixo dos panos tudo ainda acontece do mesmo jeito.&lt;/p&gt;

&lt;p&gt;Você talvez tenha ouvido falar, no passado, que o JavaScript não é uma linguagem orientada a objetos.
Mas sim, o JavaScript sempre foi uma linguagem orientada a objetos. A verdade é que ele
tem uma orientação a objetos completa que é muito mais potente que várias linguagens
clássicas por aí.&lt;/p&gt;

&lt;p&gt;Sempre houve tipos primitivos e objetos no JavaScript, sendo 5 os tipos primitivos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;undefined&lt;/li&gt;
  &lt;li&gt;null&lt;/li&gt;
  &lt;li&gt;boolean&lt;/li&gt;
  &lt;li&gt;number&lt;/li&gt;
  &lt;li&gt;string&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Sendo que &lt;em&gt;boolean&lt;/em&gt;, &lt;em&gt;number&lt;/em&gt; e &lt;em&gt;string&lt;/em&gt; possuem suas versões em classes, diferenciados pela primeira
letra em maiúscula:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boolean&lt;/li&gt;
  &lt;li&gt;Number&lt;/li&gt;
  &lt;li&gt;String&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Um objeto base o qual todos os outros objetos herdam&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object&quot;&gt;Object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E as 4 capacidades básicas de uma linguagem orientada a objetos:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Encapsulamento&lt;/li&gt;
  &lt;li&gt;Agregação&lt;/li&gt;
  &lt;li&gt;Herança, e&lt;/li&gt;
  &lt;li&gt;Polimorfismo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Criar objetos em JavaScript é trivial. Isso pode ser feito de diversas formas.
A maneira mais simples é com objetos Literais:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var obj = {};

// verificando o tipo da variável obj
console.log(typeof obj); // &quot;object&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos também criar usando a classe &lt;strong&gt;&lt;em&gt;Object&lt;/em&gt;&lt;/strong&gt; mencionada acima:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var obj = new Object();

// verificando o tipo da variável obj
console.log(typeof obj); // &quot;object&quot;    
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para adicionar propriedades e métodos a um objeto literal é muito simples:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// passando as propriedades e métodos na criação do objeto literal
var obj = {
    // propriedades
    nome: &#39;banana&#39;,
    cor: &#39;amarelo&#39;,

    // métodos
    toString: function() {
        console.log(this.nome + &quot;, &quot; + this.cor);
    }
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note que separamos as propriedades e os métodos por vírgula. O JavaScript é uma linguagem muito
dinâmica, então podemos atachar métodos e propriedades dinamicamente
em tempo de execução:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var fruta = {};

// propriedades
fruta.nome = &#39;pêra&#39;;
fruta.cor = &#39;verde&#39;;

// métodos
fruta.toString = function() {
    console.log(this.nome + &quot;, &quot; + this.cor);
}

fruta.toString(); // &#39;pêra, verde&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note também que usamos a palavra-chave reservada &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt; dentro dos métodos.
O &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt; nesse caso represent a o dono do método, nesse caso o 
objeto &lt;code class=&quot;inline&quot;&gt;fruta&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt; no JavaScript nem sempre é o que esperamos que seja. O valor
dele depende muito do contexto e estar confortável sobre o valor do &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt;
no JavaScript é talvez o mais complicado da linguagem.&lt;/p&gt;

&lt;p&gt;Ok, criamos nossos primeiros objetos. Agora vamos criar novas frutas.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var banana = new fruta(); // TypeError: fruta is not a constructor&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ops, deu erro. Os códigos acima criam apenas objetos literais para uso imediato, para serem passados
por parâmetro, para encapsularem dados e/ou funções, entre outos usos, muito útil em programação
funcional, mas não muito usual em programação orientada a objetos.&lt;/p&gt;

&lt;p&gt;Para criarmos novas instâncias do nosso objeto &lt;code class=&quot;inline&quot;&gt;fruta&lt;/code&gt;,
com dados diferentes para cada uma, precisamos fazer uso de classes e no JavaScript
classes são &lt;em&gt;Funções Construtoras&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;funes-construtoras&quot;&gt;Funções Construtoras&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Classes em JavaScript são funções construtoras&lt;/strong&gt; de objetos. Como qualquer classe em orientação a objetos, elas possuem
estado (locais para armazenamento de dados) e comportamento (funcionalidades e métodos públicos e privados).&lt;/p&gt;

&lt;p&gt;O estado do objeto são variáveis e os métodos, além das classes, também são funções.
Podemos verificar isso investigando o objeto &lt;em&gt;String&lt;/em&gt; do JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// o objeto String é uma função
console.log(typeof String); // &quot;function&quot;

// criando uma instância do objeto String
var st = new String(&quot;abc&quot;);

// o método split do objeto String também é uma função
console.log(typeof st.split); // &quot;function&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Com isso comprovamos que classes e métodos em JavaScript são todos funções. Isso é possível
pois funções no JavaScript são objetos de primeira classe, isso significa que podemos
tratá-las como qualquer outro objeto, passando-as como parâmetro para outras funções,
assinalando-as a variáveis e por ai em diante.&lt;/p&gt;

&lt;p&gt;A diferença de funções construtoras é que elas servem para construir e retornar novos objetos.&lt;/p&gt;

&lt;p&gt;É muito simples criar uma função construtora. Basta criar uma função que não retorna nada. Por
convenção usamos a primeira letra em maiúscula:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Fruta() {};&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;E usamos da seguinte forma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var banana = new Fruta();
var morango = new Fruta();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Muito simples!&lt;/p&gt;

&lt;p&gt;Agora vamos deixá-la mais usual, parecendo-se mais com uma classe.&lt;/p&gt;

&lt;p&gt;Para que possamos instanciar novos objetos com estados e comportamente, precisamos fazer o 
uso do &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt;, como mostrado a seguir:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Fruta(nome, cor) {
    this.nome = nome;
    this.cor = cor;
    this.toString = function() {
        console.log(this.nome + &quot;, &quot; + this.cor);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos criar novas instâncias de Fruta com dados:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var banana = new Fruta(&#39;banana&#39;, &#39;amarelo&#39;);
var pera = new Fruta(&#39;pêra&#39;, &#39;verde&#39;);

banana.toString(); // &quot;banana, amarelo&quot;
pera.toString(); // &quot;pêra, verde&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Acabamos de criar uma classe em JavaScript e duas instâncias dessa classe.&lt;/p&gt;

&lt;p&gt;A classe que criamos acima é uma função construtora que define propriedades e métodos com o &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt;.
Com isso conseguimos novas instâncias dessa classe executando a função precedida da palavra-chave
&lt;code class=&quot;inline&quot;&gt;new&lt;/code&gt; que retornará um novo objeto.&lt;/p&gt;

&lt;p&gt;Todo objeto em JavaScript criado com a palavra-chave &lt;code class=&quot;inline&quot;&gt;new&lt;/code&gt;
tem uma propriedade extra chamada &lt;code class=&quot;inline&quot;&gt;constructor&lt;/code&gt; que aponta de volta
para a função construtora usada para construí-lo. Podemos checar isso da seguinte forma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;console.log(banana.constructor);

/* imprime: function Fruta(nome, cor) {
  this.nome = nome;
  this.cor = cor;
  this.toString = function () {
      window.runnerWindow.proxyConsole.log(this.nome + &quot;, &quot; + this.cor);
  };
}*/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos até criar novas instâncias da classe com a propriedade &lt;code class=&quot;inline&quot;&gt;constructor&lt;/code&gt;
através de qualquer instância da classe:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var pera = new banana.constructor(&quot;pêra&quot;, &quot;verde&quot;);

pera.toString(); // &quot;pêra, verde&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos exemplos acima estamos usando, além de classes e objetos, um conceito muito básico
do paradigma de orientação a objetos: &lt;strong&gt;polimorfismo&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Toda função em JavaScript herda
de &lt;em&gt;Object&lt;/em&gt;. O &lt;em&gt;Object&lt;/em&gt; é uma classe/função construtora e possui um método chamado
&lt;code class=&quot;inline&quot;&gt;toString()&lt;/code&gt; que está sendo sobrescrito na nossa classe
construtora Fruta pelo método de mesmo nome &lt;code class=&quot;inline&quot;&gt;toString()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Podemos checar essa herança da seguinte forma:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var banana = new Fruta(&#39;banana&#39;, &#39;amarelo&#39;);
var pera = new Fruta(&#39;pêra&#39;, &#39;verde&#39;);

// verificando se nossos objetos fruta são instâncias de Fruta
console.log(banana instanceof Fruta); // true
console.log(pera instanceof Fruta); // true

// verificando se a função construtora Fruta é uma instâcia/herda de Object
console.log(Fruta instanceof Object); // true

// do mesmo jeito que String, Boolean e Number também são instâncias/herdam de Object
console.log(String instanceof Object); // true
console.log(Boolean instanceof Object); // true
console.log(Number instanceof Object); // true
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;we-have-a-problem-captain&quot;&gt;We Have a Problem Captain&lt;/h2&gt;

&lt;p&gt;Criar múltiplas instâncias de objetos usando a estrutura do código anterior
consome bastante memória pois, nessa abordagem, cada instância de um objeto é
completamente distinta das outras, ou seja, elas são instâncias do mesmo objeto porém
não compartilham nada entre si. São completamente independentes.&lt;/p&gt;

&lt;p&gt;Isso significa que as funções usadas nos métodos de cada instância da classe não
compartilham o mesmo espaço de memória.&lt;/p&gt;

&lt;p&gt;Podemos verificar isso no código abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Fruta(nome, cor) {
    this.nome = nome;
    this.cor = cor;
    this.toString = function() {
        console.log(this.nome + &quot;, &quot; + this.cor);
    }
}

var banana = new Fruta(&quot;banana&quot;, &quot;amarelo&quot;);
var banana2 = new Fruta(&quot;banana&quot;, &quot;amarelo&quot;);

// Para cada instância é criada uma nova função diferente para toString()
console.log(banana.toString === banana2.toString); // false

// O que é um desperdiço de memória já que elas fazem exatamente a mesma coisa
banana.toString(); // &quot;banana, amarelo&quot;
banana2.toString(); // &quot;banana, amarelo&quot;

// E se quisermos extender um método em tempo de execução,
// teremos que alterar instância por instância 
banana2.toString = function() {
    console.log(&quot;&quot;);
}

banana.toString(); // &quot;banana, amarelo&quot;
banana2.toString(); // &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Além disso, já que essas instâncias não compartilham nada entre si, não conseguimos extender
a classe dinamicamente, teremos que alterar cada uma das instâncias da classe unicamente.&lt;/p&gt;

&lt;p&gt;Aterar funcionalidades de uma instância única, sem passar pela classe e sem compartilhar
com as outras instâncias, é uma característica muito comum em &lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming_language&quot;&gt;linguagens dinâmicas&lt;/a&gt;
e é conhecida como &lt;a href=&quot;https://en.wikipedia.org/wiki/Monkey_patch&quot;&gt;Monkey patch&lt;/a&gt;, encontrada também em
&lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt;, &lt;a href=&quot;https://www.python.org/&quot;&gt;Phyton&lt;/a&gt;
e diversas outras linguagens dinâmicas.&lt;/p&gt;

&lt;p&gt;Porém esse comportamento pode nos trazer grandes problemas lidando com programação orientada
a objetos, por isso é uma má prática, pois em algum momento ficaremos confusos em relação ao que
cada instância do objeto pode ou não fazer e qual é realmente a responsabilidade
da classe que os criou, causando muitas vezes comportamentos estranhos. Além de tudo,
estaremos ferindo os dois primeiros princípios básicos de orientação a objetos definidos
em &lt;a href=&quot;https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)&quot;&gt;S.O.L.I.D&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Em alguns casos, como em programação funcional, esse comportamento certamente é de
bom uso. Porém, em orientação a objetos sempre é uma melhor prática extender a classe.&lt;/p&gt;

&lt;h2 id=&quot;porqu-o-padro-prototypes--o-ideal&quot;&gt;Porquê o Padrão &lt;em&gt;prototypes&lt;/em&gt; é o Ideal?&lt;/h2&gt;

&lt;p&gt;Toda função em JavaScript, e portanto toda função construtora, tem um protótipo. O protótipo
de uma função é uma propriedade dela que descreve seus métodos e propriedades. Podemos extender esses métodos alterando o
protótipo da função e/ou herdando o protótipo de outra função.&lt;/p&gt;

&lt;p&gt;Esse protótipo está disponível em uma propriedade chamada &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt;.
Toda função em JavaScript tem essa propriedade.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt; é um objeto
que contém todos os métodos e propriedades associados a uma instância de uma função/classe criada com a palavra-chave &lt;code class=&quot;inline&quot;&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;O protótipo de toda função é &lt;em&gt;Object&lt;/em&gt; e pode ser extendido. Vamos analisar nossa função/classe Fruta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Fruta(nome, cor) {
    this.nome = nome;
    this.cor = cor;
}

console.log(&#39;Protótipo de Fruta:&#39;, Fruta.prototype); // &quot;Protótipo de Fruta:&quot; [object Object] { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como esperado o protótipo da nossa função Fruta é o obeto &lt;em&gt;Object&lt;/em&gt; que, como já mencionado, é
a função construtora de todas as funções no JavaScript.&lt;/p&gt;

&lt;p&gt;Sabendo que o JavaScript é uma linguagem dinâmica e com esse nosso novo conhecimento de que
funções têm a propriedade &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt; e que essa é um objeto,
podemos adicionar nossas próprias propriedades e métodos nesse objeto.&lt;/p&gt;

&lt;p&gt;Vamos criar a mesma classe Fruta usando &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt; e entender
como que com prototype instânciamos objetos de maneira mais eficiente.&lt;/p&gt;

&lt;h3 id=&quot;mtodos-no-prototype&quot;&gt;Métodos no Prototype&lt;/h3&gt;

&lt;p&gt;Nesse exemplo mostro como adicionar métodos no &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt; ao
invés de colocar direto no &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt; e qual é a diferença.&lt;/p&gt;

&lt;p&gt;Além disso vamos ver que métodos e variáveis privadas são definidos dentro da classe, fora
do &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Fruta(nome, cor) {
    this.nome = nome;
    this.cor = cor;

    // variável acessível apenas dentro da classe
    var _variavelPrivada;
  
    this.metodoPrivilegiado = function () { 
        // privilegiado pois acessa variáveis privadas e é acessível externamente 
        _variavelPrivada = 0;
        console.log(_variavelPrivada);
    };
}

// adicionando o método toString à nossa classe
Fruta.prototype.toString = function() {
    console.log(this.nome + &quot;, &quot; + this.cor);
}

var banana = new Fruta(&quot;banana&quot;, &quot;amarelo&quot;);
var pera = new Fruta(&quot;pêra&quot;, &quot;verde&quot;);
var laranja = new Fruta(&quot;laranja&quot;, &quot;laranja&quot;);

// A definição da função toString() é compartilhada entre as instâncias
console.log(banana.toString === pera.toString); // true

// O que é um disperdiço de memória já que elas fazem a mesma coisa
banana.toString(); // &quot;banana, amarelo&quot;
pera.toString(); // &quot;pêra, verde&quot;
laranja.toString(); // &quot;laranja, laranja&quot;

// mudanças no prototype afetam todas as instâncias existentes
// e futuras da classe
Fruta.prototype.toString = function() {
    console.log(this.nome.split(&quot;&quot;).reverse().join(&quot;&quot;));
}

banana.toString(); // &quot;ananab&quot;
pera.toString(); // &quot;arêp&quot;
laranja.toString(); // &quot;ajnaral&quot;

// podemos redefinir dinamicamente um método de uma única instância
// o JavaScript vai criar uma função separada somente para ele
pera.toString = function() {
    console.log(&quot;&quot;);
}

// pera agora tem o metodo toString independente
console.log(banana.toString === pera.toString); // false

banana.toString(); // &quot;ananab&quot;
pera.toString(); // &quot;&quot;
laranja.toString(); // &quot;ajnaral&quot;


// toString de banana e laranja continuam sendo a mesma função
console.log(banana.toString === laranja.toString); // true

// acessando variável privada
banana.metodoPrivilegiado(); // 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como a propriedade &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt; é um objeto, podemos também definir
nossas propriedades e métodos no estilo de objetos literais:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Fruta() {}

// adicionando o método toString à nossa classe
Fruta.prototype = {
    nome: &quot;&quot;,
    cor: &quot;&quot;,

    setNome: function(nome) {
        this.nome = nome;
    },

    setCor: function(cor) {
        this.cor = cor;
    },

    toString: function() {
        console.log(this.nome + &quot;, &quot; + this.cor);
    }
}

var banana = new Fruta();
banana.setNome(&quot;banana&quot;);
banana.setCor(&quot;amarelo&quot;);

var pera = new Fruta();
pera.setNome(&quot;pêra&quot;);
pera.setCor(&quot;verde&quot;);

var laranja = new Fruta();
laranja.setNome(&quot;laranja&quot;);
laranja.setCor(&quot;laranja&quot;);

banana.toString(); // &quot;banana, amarelo&quot;
pera.toString(); // &quot;pêra, verde&quot;
laranja.toString(); // &quot;laranja, laranja&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note que podemos assinalar propriedades e funções no &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt;.
Porém variáveis de instância como &lt;code class=&quot;inline&quot;&gt;nome&lt;/code&gt; e &lt;code class=&quot;inline&quot;&gt;cor&lt;/code&gt;
são dados específicos de cada instâncias e o JavaScript vai criar referências únicas
para cada propriedade de qualquer forma, não tendo assim diferença no impacto de uso da memória.&lt;/p&gt;

&lt;p&gt;Sabendo disse é considerado por convenção uma boa prática definir métodos no &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt;
e propriedades no &lt;code class=&quot;inline&quot;&gt;this&lt;/code&gt;, dentro da função.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Fruta(nome, cor) {
    // propriedades dentro da função, usando o this
    this.nome = nome;
    this.cor = cor;
}

// e métodos no prototype
Fruta.prototype.toString = function() {
    console.log(this.nome + &quot;, &quot; + this.cor);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;encapsulamento-mtodos-estticos-e-propriedades-estticas&quot;&gt;Encapsulamento, métodos estáticos e propriedades estáticas&lt;/h2&gt;

&lt;p&gt;No código abaixo temos uma abordagem de como podemos encapsular uma variável privada, criar
métodos privados e estáticos assim como valores estáticos como é o caso de um contador de 
instâncias da classe.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function Fruta(nome, cor) {
    this.nome = nome;
    this.cor = cor;

    // incrementa quantidade de objetos instanciados
    // executado toda vez que uma instância é criada
    Fruta.incrementaQntInstancia();

    // propriedade privada, é acessada somente dentro da classe
    var _variavelPrivada = 0;

    // método privado, é acessado somente dentro da classe
    function metodoPrivado() {
        _variavelPrivada++;
    }

    // métodos privilegiados, é público e tem acesso a variáveis privadas,
    // é único para cada instância
    this.incrementaVariavelPrivada = function() {
        metodoPrivado();
    }

    // encapsulando a variável privada
    this.getVariavelPrivada = function() {
        return _variavelPrivada;
    }

    this.setVariavelPrivada = function(valor) {
        _variavelPrivada = valor;
    }
}

// adicionando o método toString à nossa classe via prototype
// ficando assim compartilhado entre as instância e extensível
Fruta.prototype.toString = function() {
    console.log(this.nome + &quot;, &quot; + this.cor);
}

// propriedade estática, instâncias não tem acesso 
Fruta.qntInstancias = 0;

// método estático, instâncias não tem acesso 
Fruta.incrementaQntInstancia = function() {
    Fruta.qntInstancias++;
};

var banana = new Fruta(&quot;banana&quot;, &quot;amarelo&quot;);
var pera = new Fruta(&quot;pêra&quot;, &quot;verde&quot;);
var laranja = new Fruta(&quot;laranja&quot;, &quot;laranja&quot;);
var morango = new Fruta(&quot;morango&quot;, &quot;vermelho&quot;);

// imprime propriedade estática da classe Fruta
console.log(&quot;Quantidade de instâncias de Fruta: &quot; + Fruta.qntInstancias); // 4

banana.setVariavelPrivada(1);
pera.setVariavelPrivada(2);
laranja.setVariavelPrivada(3);
morango.setVariavelPrivada(4);

banana.incrementaVariavelPrivada();

console.log(&quot;Variável privada de banana: &quot; + banana.getVariavelPrivada()); // 2
console.log(&quot;Variável privada de pera: &quot; + pera.getVariavelPrivada()); // 2
console.log(&quot;Variável privada de laranja: &quot; + laranja.getVariavelPrivada()); // 3
console.log(&quot;Variável privada de morango: &quot; + morango.getVariavelPrivada()); // 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;funesobjetosarrays&quot;&gt;Funções/Objetos/Arrays&lt;/h2&gt;

&lt;p&gt;Uma coisa legal de entender em JavaScript é que funções são objetos de primeira classe e
objetos, em seu nível mais baixo, são arrays associativos de chave e valor. Então funções
também são arrays.&lt;/p&gt;

&lt;p&gt;Cada propriedade e método de um objeto é definido como um item de array.&lt;/p&gt;

&lt;p&gt;Podemos comprovar isso acessando propriedades e métodos em &lt;em&gt;array style&lt;/em&gt; e percorrendo
os itens desse array:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var banana = new Fruta(&quot;banana&quot;, &quot;amarelo&quot;);

// acessando propriedades
console.log(banana.nome); // &quot;banana&quot;
// ou
console.log(banana[&quot;nome&quot;]); // &quot;banana&quot;

// executando o método toString()
banana.toString(); // &quot;banana, amarelo&quot;
// ou
banana[&quot;toString&quot;](); // &quot;banana, amarelo&quot;

// percorrendo os itens do array
for(item in banana) {
    console.log(item); // &quot;nome&quot;, &quot;cor&quot;, &quot;toString&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos também definir métodos estáticos para nossa função/classe e acessá-los depois
estaticamente também em &lt;em&gt;array style&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var Fruta = function(nome, cor) {
    this.nome = nome;
    this.cor = cor;
}

// definindo uma propriedade estática
Fruta[&#39;qntInstancias&#39;] = 0;

// definindo um método estático que incrementa a propriedade estática
Fruta[&#39;incrementaQntInstancia&#39;] = function() {
    Fruta[&#39;qntInstancias&#39;]++;
};

// executanto o método estático
Fruta[&#39;incrementaQntInstancia&#39;]();

// imprimindo o novo valor da propriedade estática
console.log(Fruta[&#39;qntInstancias&#39;]);  // 1

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;prototypal-inheritance&quot;&gt;Prototypal Inheritance&lt;/h2&gt;

&lt;p&gt;Podemos fazer uma herança prototípica e extender a classe Fruta adicionando novas funcionalidades
a ela.&lt;/p&gt;

&lt;p&gt;Isso é conhecido como &lt;a href=&quot;https://en.wikipedia.org/wiki/Prototype-based_programming&quot;&gt;Prototypal Inheritance&lt;/a&gt;.
O JavaScript não tem um sistema de herança devido a sua natureza prototípica e funcional.
Porém podemos combinar funções através de seus protótipo.&lt;/p&gt;

&lt;p&gt;Podemos tabém sobrescrever métodos da superclasse em nossa subclasse chamando nossa
classe/função através do método &lt;code class=&quot;inline&quot;&gt;.call()&lt;/code&gt; existente em toda função
Javascript.&lt;/p&gt;

&lt;p&gt;Vamos supor que queremos que Fruta herde as funcionalidades de uma classe chamada Natureza com
os métodos nascer, crescer e morrer:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// criando a superclasse Natureza
function Natureza(nome, cor) {
    this.nome = nome;
    this.cor = cor;
};

// Adicionando comportamentos em seu objeto prototype
Natureza.prototype.nascer = function () {
    console.log(this.nome + &#39; &#39; + this.cor + &#39; nascendo...&#39;);
}

Natureza.prototype.crescer = function () {
    console.log(this.nome + &#39; &#39; + this.cor + &#39; crescendo...&#39;);
}

Natureza.prototype.morrer = function () {
    console.log(this.nome + &#39; &#39; + this.cor + &#39; morrendo...&#39;);
}

// checando o protótipo de Natureza
console.log(&#39;Protótipo de Natureza&#39;, Natureza.prototype);

/* &quot;Protótipo de Natureza&quot;
[object Object] { -&amp;gt; Percebe-se que Natureza herda todos métodos de Object adicionando
seus próprios métodos abaixo:
crescer: function () {
    window.runnerWindow.proxyConsole.log(this.nome + &#39; &#39; + this.cor + &#39; crescendo...&#39;);
},
morrer: function () {
    window.runnerWindow.proxyConsole.log(this.nome + &#39; &#39; + this.cor + &#39; morrendo...&#39;);
},
nascer: function () {
    window.runnerWindow.proxyConsole.log(this.nome + &#39; &#39; + this.cor + &#39; nascendo...&#39;);
}
}*/

// criando a subclasse Fruta
function Fruta(nome, cor, temSemente) {
    // chamando o construtor da superclasse e passando
    // o objeto atual como contexto
    Natureza.call(this, nome, cor);

    this.temSemente = temSemente;
};

// checando o protótipo de Fruta
console.log(&#39;Protótipo de Fruta&#39;, Fruta.prototype);

// como esperado o protótipo de Fruta é Object
// &quot;Protótipo de Fruta&quot; [object Object] {

// extendendo Fruta (herança prototípica)
Fruta.prototype = Natureza.prototype;

// adicionando um método específico para frutas
Fruta.prototype.temSemente = function() {
    console.log(this.temSemente);
}

// checando novamente o protótipo de Fruta
console.log(&#39;Novo Protótipo de Fruta&#39;, Fruta.prototype);

/* Fruta agora tem todos os métodos de Object, todos os métodos de Natureza
e o seu método especializado temSemente()
&quot;Novo Protótipo de Fruta&quot;
[object Object] {
crescer: function () {
    window.runnerWindow.proxyConsole.log(this.nome + &#39; &#39; + this.cor + &#39; crescendo...&#39;);
},
morrer: function () {
    window.runnerWindow.proxyConsole.log(this.nome + &#39; &#39; + this.cor + &#39; morrendo...&#39;);
},
nascer: function () {
    window.runnerWindow.proxyConsole.log(this.nome + &#39; &#39; + this.cor + &#39; nascendo...&#39;);
},
temSemente: function () {
    window.runnerWindow.proxyConsole.log(this.temSemente);
}
} */
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos utilizar nossa classe Fruta da seguinte maneira:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var uva = new Fruta(&quot;uva&quot;, &quot;roxa&quot;, true);
var morango = new Fruta(&quot;morango&quot;, &quot;vermelho&quot;, false);

uva.nascer(); // &quot;uva roxa nascendo...&quot;
morango.nascer(); // &quot;morango vermelho nascendo...&quot;

uva.crescer(); // &quot;uva roxa crescendo...&quot;
morango.crescer(); // &quot;morango vermelho crescendo...&quot;

uva.morrer(); // &quot;uva roxa morrendo...&quot;
morango.morrer(); // &quot;morango vermelho morrendo...&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Herança prototípica é mais potente que a herança tradicional encontrada em muitas linguagens
tradicionais, pois com protótipos é possível herdar várias classes e criar uma nova classe.
Com isso podemos herdar comportamentos de duas ou mais
classes na nossa classe Fruta. Por exemplo, Fruta tem comportamentos da classe Natureza e pode
ter comportamento de uma nova classe chamada FrutasDoPoloNorte com um método chamado seProtegerDoFrio.&lt;/p&gt;

&lt;h1 id=&quot;objectcreate&quot;&gt;Object.create()&lt;/h1&gt;

&lt;p&gt;O ECMAScript 5 introduziu o método estático &lt;code class=&quot;inline&quot;&gt;create&lt;/code&gt; no objeto
&lt;code class=&quot;inline&quot;&gt;Object&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/create&quot;&gt;Object.create()&lt;/a&gt;
permite-nos construir objetos de uma maneira muito simples com os parâmetros opcionais
&lt;code class=&quot;inline&quot;&gt;proto&lt;/code&gt; que especifica o protótipo no qual o novo objeto será baseado e
&lt;code class=&quot;inline&quot;&gt;propertiesObject&lt;/code&gt; que especifica propriedades e descritores dessas
propriedades que serão atachadas no novo objeto criado. Sua sintaxe é a seguinte:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Object.create(proto, [, propertiesObject])&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Como os objetos literais criados em tempo de execução, &lt;code class=&quot;inline&quot;&gt;Object.create()&lt;/code&gt;
não é muito usual em programação orientada a objetos, porém é muito útil em programação
funcional.&lt;/p&gt;

&lt;p&gt;Esse método é apenas uma maneira mais fácil de criarmos objetos literais e únicos,
mencionados no começo desse artigo.&lt;/p&gt;

&lt;p&gt;Ao invés de fazermos isso:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// cria um objeto herdando o protótipo de Object  
var obj = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Agora podemos definir explicitamente qual o protótipo queremos herdar:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// cria um objeto herdando o protótipo de Object 
var obj = Object.create(Object.prototype);

// o mesmo resultado acima é obtido com:
var obj = Object.create({});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Por exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function MyClass() {}

// cria um objeto herdando o protótipo de MyClass 
var obj = Object.create(MyClass.prototype);

console.log(obj.constructor); // function MyClass() {}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Temos também a possibilidade de definir propriedades do objeto com os descritores 
&lt;code class=&quot;inline&quot;&gt;writable&lt;/code&gt; que indica se o campo é apenas leitura ou não,
&lt;code class=&quot;inline&quot;&gt;enumerable&lt;/code&gt; indicando se essa propriedade pode ser listada em um laço,
&lt;code class=&quot;inline&quot;&gt;configurable&lt;/code&gt; que define se o tipo da propridade pode mudar e se
ela pode ser deletada do objeto correspondente e &lt;code class=&quot;inline&quot;&gt;value&lt;/code&gt; definindo
o valor da propriedade.&lt;/p&gt;

&lt;p&gt;Isso é bem comum em &lt;em&gt;Factory Functions&lt;/em&gt; (funções que constróem objetos para nós) em diversos frameworks
e bibliotecas que usamos no dia-a-dia. O &lt;a href=&quot;https://jquery.com/&quot;&gt;JQuery&lt;/a&gt; por exemplo
usa muito &lt;code class=&quot;inline&quot;&gt;Object.create()&lt;/code&gt; debaixo dos panos para nos entregar
objetos prontos para nosso uso.&lt;/p&gt;

&lt;p&gt;Abaixo temos uma &lt;em&gt;Factory Function&lt;/em&gt; chamada &lt;code class=&quot;inline&quot;&gt;objFactory&lt;/code&gt; que constrói
e nos retorna um objeto com uma propriedade &lt;code class=&quot;inline&quot;&gt;p&lt;/code&gt; somente leitura e que não pode
ser excluída.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var MyClass = function() {};

function objFactory(p) {
    // cria um objeto herdando o protótipo de MyClass e com propriedas definidas 
    return Object.create(MyClass.prototype, { p: {
                value: p,
                writable: false,
                enumerable: true,
                configurable: false
            }
        }); 
}

// pede para o factory construir o objeto com o valor de p igual a 42 
var obj = objFactory(42)

console.log(obj.p); // 42

// alterando o valor da propriedade p
obj.p = 1000;

// p continua 42 pois o writable dele está como false
console.log(obj.p); // 42

// deletando a propriedade p
delete obj.p;

// p continua existindo pois configurable foi definida como false
console.log(obj.p); // 42
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sempre que você tiver uma função construtora e você estiver instanciando apenas um
objeto com ela usando &lt;code class=&quot;inline&quot;&gt;new&lt;/code&gt;, talvez fique mais elegante você
substituir isso por &lt;code class=&quot;inline&quot;&gt;Object.create()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Podemos aplicar isso também ao fazer a herança prototípica da nossa classe Fruta:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;Fruta.prototype = Object.create(Natureza.prototype);&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;as-palavras-chaves-class-e-extends&quot;&gt;As Palavras-Chaves &lt;em&gt;class&lt;/em&gt; e &lt;em&gt;extends&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;O ECMAScript 2015 implementou as palavras-chaves &lt;code class=&quot;inline&quot;&gt;class&lt;/code&gt; e 
&lt;code class=&quot;inline&quot;&gt;extends&lt;/code&gt; que são nada mais que açúcares sintáticos para
&lt;em&gt;Funções Construtoras&lt;/em&gt; e herança usando &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Para chegarmos no mesmo resultado da nossa classe Fruta anterior, fazemos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;class MinhaClasseFruta {
    constructor(nome, cor) {
        this.nome = nome;
        this.cor = cor;
    }
        
    toString () {
        // aqui podemos chamar o método toString() da classe mãe Object
        super.toString();

        // e/ou colocar nosso código especializado 
        console.log(this.nome + &quot;, &quot; + this.cor);
    }
}

var banana = new MinhaClasseFruta(&#39;banana&#39;, &#39;amarelo&#39;);
var uva = new MinhaClasseFruta(&#39;uva&#39;, &#39;roxa&#39;);

// comprovando que, assim como prototype, os métodos de class são compartilhado
// entre suas instâncias
console.log(banana.toString === uva.toString); // true

banana.toString(); // &#39;banana, amarelo&#39;
uva.toString(); // &#39;uva, roxa&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A classe &lt;code class=&quot;inline&quot;&gt;Fruta&lt;/code&gt; criada no primeiro exemplo e a classe
criada com a nova implementação de &lt;code class=&quot;inline&quot;&gt;class&lt;/code&gt; ambas são &lt;em&gt;Funções
Construtoras&lt;/em&gt;, por isso &lt;code class=&quot;inline&quot;&gt;class&lt;/code&gt; também herda de &lt;em&gt;Objects&lt;/em&gt;
implicitamente e são usadas do mesmo jeito: executando-as com a palavra-chave
&lt;code class=&quot;inline&quot;&gt;new&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Então, classes também são funções no JavaScript:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// retornam uma nova instância de objeto
var banana = new MinhaClasseFruta(&#39;banana&#39;, &#39;amarelo&#39;);

console.log(banana); // [object Object] {
  // cor: &quot;amarelo&quot;,
  // nome: &quot;banana&quot;
// }

// classes continuam sendo função
console.log(MinhaClasseFruta); // function () { ... }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;class&lt;/code&gt; retornam uma nova instância de objeto e também é baseada
em &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Agora herdando da superclasse Natureza:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// criando a superclasse Natureza
class Natureza {
    constructor(nome) {
        this.nome = nome;
    }
    
    toString() {
        return this.nome;
    }
};

// criando a subclasse Fruta
class Fruta extends Natureza {
    constructor(nome, cor, temSemente) {
        // chamando o construtor da superclasse
        super(nome);

        this.cor = cor;
        this.temSemente = temSemente;    
    }
      
    toString() {
        let comOuSem = this.temSemente ? &quot;com&quot; : &quot;sem&quot;; 
        return super.toString() + &#39; &#39; + this.cor + &#39; &#39; + comOuSem + &quot; semente&quot;;
    }
};

var banana = new Fruta(&quot;banana&quot;, &quot;amarela&quot;, false);
var uva = new Fruta(&quot;uva&quot;, &quot;roxa&quot;, true);

console.log(banana.toString()); // &quot;banana amarela sem semente&quot;
console.log(uva.toString()); // &quot;uva roxa com semente&quot;

// verificando o protótipo usado para construir o objeto uva
console.log(uva.constructor);

/* function Fruta(nome, cor, temSemente) {
      _classCallCheck(this, Fruta);

      // chamando o construtor da superclasse
      _get(Object.getPrototypeOf(Fruta.prototype), &quot;constructor&quot;, this).call(this, nome);
      this.cor = cor;
      this.temSemente = temSemente;
  } */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;concluso&quot;&gt;Conclusão&lt;/h2&gt;

&lt;p&gt;O JavaScript, apesar de ser potente em orientação a objetos, é por natureza uma
linguagem funcional. Por isso ele não tem um sistema de herança apropriado,
porém ele tem &lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Todo objeto em JavaScript, quando criado, tem sua definição herdada de um protótipo
(&lt;code class=&quot;inline&quot;&gt;prototype&lt;/code&gt;). Aliás esse protótipo também é um objeto que
por sua vez também tem um protótipo. Exceto pelo objeto &lt;em&gt;Object&lt;/em&gt;, que é o último protótipo
da cadeia de protótipos (&lt;a href=&quot;https://developer.mozilla.org/pt-BR/docs/Web/JavaScript/Guide/Inheritance_and_the_prototype_chain&quot;&gt;Prototype Chain&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Protótipos são definições de funções e objetos (métodos e propriedades) e neles podemos
“atachar” métodos, que também são funções. Atachando funções em protótipos nos dá a vantagem de
compartilhar a mesma referência de funções entre os objetos criados a partir desse
protótipo.&lt;/p&gt;

&lt;p&gt;O que é mais legal em JavaScript, na minha opnião, é que ele não nos obriga a programar de uma
maneira engessada, seguindo um padrão definido por alguém, como
outras linguagens orientadas a objetos tradicionais fazem. Eu particularmete gostei
da adição do açucar sintático &lt;code class=&quot;inline&quot;&gt;class&lt;/code&gt; mesmo eu não o usando muito,
acho que fica fácil para aqueles vindos de linguagens como Java e C# iniciar com e entender
JavaScript. Eu prefiro a programação funcional do javascript, mas o que eu mais gosto no JavaScript é
a liberdade que ele nos dá para escolher o paradigma que preferirmos usar. Podemos fazer
a mesma coisa usando toda a potência da programação orientada a objetos ou apenas programação
funcional ou reativa.&lt;/p&gt;

</description>
        <pubDate>Sun, 30 Oct 2016 17:29:18 -0300</pubDate>
        <link>http://blini.io/classes-e-objetos-em-javascript</link>
        <guid isPermaLink="true">http://blini.io/classes-e-objetos-em-javascript</guid>
        
        <category>javascript</category>
        
        <category>poo</category>
        
        
        <category>javascript</category>
        
        <category>poo</category>
        
      </item>
    
      <item>
        <title>O Que não é Permitido no ‘Strict Mode’ do Javascript?</title>
        <description>&lt;p&gt;A diretiva &lt;code class=&quot;inline&quot;&gt;&quot;use strict&quot;;&lt;/code&gt; do JavaScript foi incluída no &lt;strong&gt;ECMAScript 5&lt;/strong&gt; e define
que o código JavaScript será executado em &lt;em&gt;Strict Mode&lt;/em&gt; (modo restrito), o que nos obriga a
seguir algumas regras de sintaxe para escrevermos um código mais “seguro”.&lt;/p&gt;

&lt;h2 id=&quot;porqu-strict-mode&quot;&gt;Porquê &lt;em&gt;Strict Mode&lt;/em&gt;?&lt;/h2&gt;

&lt;p&gt;O JavaScript é uma linguagem extremamente dinâmica e flexível, o que nos permite escrever código
sem seguir nenhuma convenção de sintaxe e fazer coisas muito estranhas que em qualquer outra linguagem
nunca seria permitido. Como por exemplo usar uma variável sem declará-la antes.&lt;/p&gt;

&lt;p&gt;O problema é que essa liberdade toda pode causar comportamentos não esperados no código podendo
ser as vezes de difícil identificação e correção.&lt;/p&gt;

&lt;p&gt;Com o &lt;em&gt;Strict Mode&lt;/em&gt; ativado o JavaScript fica menos flexível e nos obriga a seguir algumas
regras. O interpretador do JavaScript irá sempre retornar um erro e travar a execução
do código sempre que encontrar alguma dessas más sintaxes no código. O que ele
basicamente faz é converter as más sintaxes, antes permitidas, em erros reais. Isso nos dá
mais segurança de que nosso código vai se comportar como o esperado.&lt;/p&gt;

&lt;h2 id=&quot;como-e-onde-declarar-o-stric-mode&quot;&gt;Como e Onde Declarar o Stric Mode?&lt;/h2&gt;

&lt;p&gt;O &lt;em&gt;Strict Mode&lt;/em&gt; é ativado adicionando o literal &lt;code class=&quot;inline&quot;&gt;“strict mode”;&lt;/code&gt;
no começo de scripts ou de funções e se aplica apenas ao contexto onde foi inserido.
Caso seja inserido no começo do script, será aplicado a todo o código.
Caso for incluído no começo de uma função será aplicado apenas dentro da função.&lt;/p&gt;

&lt;h2 id=&quot;as-ms-sintaxes-que-o-strict-mode-no-permite&quot;&gt;As Más Sintaxes que o &lt;em&gt;Strict Mode&lt;/em&gt; não permite&lt;/h2&gt;

&lt;h4 id=&quot;utilizar-varivel-sem-declarar&quot;&gt;Utilizar variável sem declarar&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
x = 3.14;  // isso vai retornar um erro
obj = {p1:10, p2:20}; // também vale para objetos
var y = 3.14 // ok
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;deletar-variveis-ou-objeto&quot;&gt;Deletar variáveis ou objeto&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
var x = 3.14;
delete x;  // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;deletar-funo&quot;&gt;Deletar função&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
function x(p1, p2) {}; 
delete x;  // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;duplicar-nome-de-parmetros&quot;&gt;Duplicar nome de parâmetros&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
function x(p1, p1) {}; // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;nmeros-em-octal&quot;&gt;Números em Octal&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
var x = 010; // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;caracteres-de-escape&quot;&gt;Caracteres de Escape&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
var x = \010; // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;escrever-em-uma-propriedade-read-only&quot;&gt;Escrever em uma propriedade read-only&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
var obj = {};
Object.defineProperty(obj, &quot;x&quot;, {value:0, writable:false});

obj.x = 3.14; // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;escrever-em-uma-propriedade-get-only&quot;&gt;Escrever em uma propriedade get-only&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
var obj = {get x() {return 0} };

obj.x = 3.14; // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;deletar-uma-propriedade-que-no-pode-ser-deletada&quot;&gt;Deletar uma propriedade que não pode ser deletada&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
delete Object.prototype; // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;usar-palavras-reservadas-como-arguments-e-eval-em-nome-de-variveis&quot;&gt;Usar palavras reservadas como ‘arguments’ e ‘eval’ em nome de variáveis&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
var eval = 3.14; // isso vai retornar um erro

var arguments = 3.14; // isso também vai retornar um erro

// Isso serve também para as palavras reservadas:
// implements
// interface
// let
// package
// private
// protected
// public
// static
// yield
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;usar-a-declarao-while&quot;&gt;Usar a declaração while&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
with (Math){x = cos(2)}; // isso vai retornar um erro
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;restrio-na-funo-eval&quot;&gt;Restrição na função eval()&lt;/h4&gt;

&lt;p&gt;A função &lt;code class=&quot;inline&quot;&gt;eval()&lt;/code&gt; não pode criar variáveis no escopo onde ela é usada&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;&quot;use strict&quot;;
eval (&quot;var x = 2&quot;);
alert (x); // a variável &#39;x&#39; não existe aqui
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Mon, 24 Oct 2016 07:09:41 -0300</pubDate>
        <link>http://blini.io/o-que-nao-e-permitido-no-strict-mode-do-javascript</link>
        <guid isPermaLink="true">http://blini.io/o-que-nao-e-permitido-no-strict-mode-do-javascript</guid>
        
        <category>javascript</category>
        
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>WordPress - Como diminuir o Page Load de 1 minuto para 15 segundos</title>
        <description>&lt;p&gt;Este foi um trabalho que eu fiz para um hostel em &lt;a href=&quot;https://www.lonelyplanet.com/hungary/budapest&quot;&gt;Budapeste - Hungria&lt;/a&gt;.
O site do hostel foi feito com WordPress e apresentava extrema lentidão no carregamento da página,
e discrepâncias e erros na responsividade do layout quando visitado em telas pequenas.&lt;/p&gt;

&lt;p&gt;O site não tinha nenhum tipo de otimização. O antigo desenvolvedor apenas instalou o WordPress, adicionou o template &lt;a href=&quot;https://themeforest.net/item/nice-hotel-wordpress-theme/2661854&quot;&gt;Nice Hostel&lt;/a&gt; e entregou
um Page Load de incríveis 1:09. Muito tempo de espera para um site onde uma das &lt;em&gt;Personas&lt;/em&gt; é
o(a) viajante com pressa para reservar um quarto, não?&lt;/p&gt;

&lt;p&gt;Pois é, a missão dada foi diminuir esse tempo de espera para poucos segundos e um carregamento
total da página para no máximo 15 segundos sob uma conexão de 1mbps com o cache desabilitado,
ou seja, quando o usuário estiver visitando o site pela primeira. Outra tarefa era melhorar a reponsividade do site.&lt;/p&gt;

&lt;p&gt;Eis o resultado:&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/157547302&quot; width=&quot;640&quot; height=&quot;360&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;em&gt;Missão dada é missão cumprida&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Concordam que agora ficou muito mais rápido pra um viajante recém chegado em Budapeste,
acessar o site e reservar um quarto, certo?&lt;/p&gt;

&lt;p&gt;Enquanto agora o cara navega pelos quartos, vê as fotos e já reserva um quarto,
no site antigo o usuário ainda estaria esperando a página ser carregada, tédio!&lt;/p&gt;

&lt;p&gt;E ficou claro que a taxa de desistência do site diminuiu de 65% pra quase 0% e o hostel agora
não está perdendo mais nenhuma visita e faturando muito mais.&lt;/p&gt;

&lt;h2 id=&quot;como-foi-possvel-fazer-tamanha-melhoria-em-um-page-load&quot;&gt;Como foi possível fazer tamanha melhoria em um Page Load?&lt;/h2&gt;

&lt;p&gt;Primeiro, nenhum arquivo Javascript e CSS deve ser colocado em produção sem antes ser &lt;strong&gt;minificado e uglificado&lt;/strong&gt;.
Existem diversas maneiras de se fazer isso e vários plugins no WordPress que fazem isso pra gente.
A maneira que eu prefiro fazer é baixar e abrir localmente o tema usado no WordPress, identificar todas as dependências do front-end,
analizá-las e &lt;strong&gt;eliminar código desnecessário&lt;/strong&gt; e depois &lt;strong&gt;minificar, uglificar&lt;/strong&gt; e &lt;strong&gt;concatenar&lt;/strong&gt; com qualquer
ferramenta.&lt;/p&gt;

&lt;p&gt;Se as alterações no tema forem frequentes é recomendo automatizar esse processo com o 
&lt;a href=&quot;http://gruntjs.com/&quot;&gt;Grunt&lt;/a&gt; ou o &lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;.
No caso desse projeto eu minifiquei e concatenei com ferramentas online mesmo e preservei o original (muito importante)
já que alterações futuras seriam muito pontuais. Uma das dependências que eu identifiquei e eliminei e que estava
consumindo muito tempo de carregamento, por exemplo, foi o leitor de &lt;em&gt;feeds RSS&lt;/em&gt; que esse tema possui como padrão
e que não era usado em nenhum momento pelo site, era um download desnecessário.&lt;/p&gt;

&lt;p&gt;A concatenação dos arquivos (junção dos estilos em um único arquivo CSS e dos JavaScripts em um único arquivo JS)
é recomendado pois os navegadores carregam um número limitado de arquivos por vez, em blocos,
e até que esse bloco seja totalmente carregado os outros arquivos ficam na fila de espera
e isso atrasa o carregamento da página. Então se você tem mais de 1 CSS na página é uma boa prática
juntá-los em um único CSS, assim o navegador carrega todos em uma única requisição evitando atrasos no download de outros recursos da página e
diminuindo drasticamente o carregamento. Identifiquei também muitos códigos CSS inline e incorporado em tags HTML. Removi e coloquei
em arquivos CSS externos. CSS’s inline podem reduzem o número de requisições porém aumenta o tamanho do HTML.
Em alguns casos pode ser bom, porém deve ser analizado com atenção.
Nesse projeto específico tinha muito CSS inline e incorporado, então valeu a pena criar um css externo.&lt;/p&gt;

&lt;p&gt;Depois podemos dar ao usuário uma percepção de que o site está sendo carregado mais rápido, aumentando
o tempo de resposta da renderização do HTML.
Fazemos isso &lt;strong&gt;referenciando os arquivos nos lugares certos&lt;/strong&gt; no HTML. Estilos &lt;strong&gt;CSS dentro da
tag head&lt;/strong&gt; e &lt;em&gt;scripts&lt;/em&gt; &lt;strong&gt;JavaScript no final da página&lt;/strong&gt;. O navegador
precisa fazer o download e executar cada &lt;em&gt;script&lt;/em&gt; JS e isso bloqueia o carregamento de outros recursos até
que isso seja feito pra cada &lt;em&gt;script&lt;/em&gt;. Colocando-os no final da página nós garantimos que até
chegar o momento de executar &lt;em&gt;scripts&lt;/em&gt;, a parte mais importante da página, feita somente com HTML e os estilos CSS,
já estará visível para o usuário ao invés dele ficar vendo uma tela em branco (como era o caso, mostrado no vídeo acima).&lt;/p&gt;

&lt;p&gt;Pra melhorar ainda mais esse carregamento foi feito &lt;strong&gt;compressão dos htmls e assets com GZIP&lt;/strong&gt;, todas &lt;strong&gt;imagens&lt;/strong&gt; foram
&lt;strong&gt;otimizadas&lt;/strong&gt;, configuradas para &lt;strong&gt;carregar progressivamente&lt;/strong&gt; e depois &lt;strong&gt;comprimidas&lt;/strong&gt; manualmente, usando a técnica
&lt;a href=&quot;https://en.wikipedia.org/wiki/Lossy_compression&quot;&gt;&lt;em&gt;Lossy Compression&lt;/em&gt;&lt;/a&gt;
com o &lt;a href=&quot;https://tinyjpg.com/&quot;&gt;TinyJpg&lt;/a&gt; e o &lt;a href=&quot;https://tinypng.com/&quot;&gt;TinyPng&lt;/a&gt; e depois instalado
o plugin &lt;a href=&quot;https://br.wordpress.org/plugins/tiny-compress-images/&quot;&gt;TinyImg&lt;/a&gt; no WordPress pra que
todas as próximas imagens &lt;em&gt;“upadas”&lt;/em&gt; fossem comprimidas automaticamente.&lt;/p&gt;

&lt;p&gt;Outro grande gargalo identificado foi a imagem de fundo da página. Como era basicamente um fundo preto com
um desenho simples, feita erroneamente em um JPG grande, a solução foi extrair esse desenho, transformá-lo em um PNG pequeno, otimizá-lo
e repetí-lo no eixo x do &lt;em&gt;viewport&lt;/em&gt; junto com uma cor de &lt;em&gt;background&lt;/em&gt; preta, eliminando assim muitos &lt;em&gt;kilobytes&lt;/em&gt; de download e espera do usuário.&lt;/p&gt;

&lt;p&gt;Temas de WordPress carregam muita coisa desnecessária que muitas vezes nunca são usadas e só fazem aumentar o tempo de carregamento da página.
Esse era também o caso desse projeto, muitos recursos do tema estavam sendo carregados e nunca usados.
Foi necessário então identificar todas essas dependências e eliminá-las.
Podemos fazer isso manualmente, porém existem plugins no WordPress como o
&lt;a href=&quot;https://wordpress.org/plugins/asset-queue-manager/&quot;&gt;Asset Queue Manager&lt;/a&gt; que nos
ajudam com isso e foi usado neste caso para esse propósito.&lt;/p&gt;

&lt;p&gt;E para as bibliotecas JavaScript de terceiros é recomendado configurar execução assíncrona
com o atributo &lt;code class=&quot;inline&quot;&gt;async&lt;/code&gt; que também pode ser feita com o &lt;code class=&quot;inline&quot;&gt;defer&lt;/code&gt;, exemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-markup&quot;&gt;&amp;lt;script async src=&quot;https://third-party.com/resource.js&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Isso faz com que o &lt;em&gt;script&lt;/em&gt; seja executado assincronamente, assim que ele estiver disponível, não bloqueando a continuação do carregamento da página. 
Em navegadores que não suportam esse atributo, existe outra maneira de fazer isso, como mostrado abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;(function(d, t) {
    var g = d.createElement(t),
        s = d.getElementsByTagName(t)[0];
    g.src = &#39;https://third-party.com/resource.js&#39;;
    s.parentNode.insertBefore(g, s);
}(document, &#39;script&#39;));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;É claro que você precisa tomar cuidado para não quebrar outros &lt;em&gt;scripts&lt;/em&gt; que dependem desse &lt;em&gt;script&lt;/em&gt;
pois a ordem de inserção dos &lt;em&gt;script&lt;/em&gt; na página, nesse caso, deixa de ser relevante.&lt;/p&gt;

&lt;p&gt;Outra coisa que melhora muito a performance no mobile é criar
&lt;strong&gt;versões específicas de imagens para telas pequenas&lt;/strong&gt;. O usuário que está acessando o site pelo celular 
em uma tela de 320px de largura, por exemplo, não precisa fazer o download de uma imagem com 780px de largura.
Nesse caso foram criados &lt;em&gt;breakpoints&lt;/em&gt; no CSS que carregam e exibem imagens específicas
para telas pequenas, médias e grandes.&lt;/p&gt;

&lt;p&gt;Além de tudo isso, todo o código JavaScript do tema foi refatorado e muito código refeito para
usar abordagens mais performáticas e recomendadas. Um exemplo é guardar o tamanho do array em
&lt;em&gt;loops for&lt;/em&gt; eliminando esse cálculo de ser feito em cada interação, otimizando assim a performance do JavaScript.
Isso é feito como mostrado no exemplo abaixo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;var arr = new Array(1000),
    len, i;

for (i = 0; i &amp;lt; arr.length; i++) {
  // Ruim - o tamanho precisa ser calculado 1000 vezes
}

for (i = 0, len = arr.length; i &amp;lt; len; i++) {
  // Bom - o tamanho só é calculado 1 vez e depois armazenado
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Fonte: https://browserdiet.com/pt/#cache-array-lengths&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Um site muito legal que serve como um guia definitivo criado por &lt;a href=&quot;https://zenorocha.com/&quot;&gt;Zeno Rocha&lt;/a&gt;
pra todo esse processo de melhoria de performance
é o &lt;a href=&quot;https://browserdiet.com/pt/&quot;&gt;https://browserdiet.com/pt/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;E no final de tudo isso o feedback recebido pelo cliente foi:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Man, you are the best! Thanks a lot!!!!!!!!!!!!!!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You’re welcome! :)&lt;/p&gt;

</description>
        <pubDate>Thu, 08 Sep 2016 21:27:00 -0300</pubDate>
        <link>http://blini.io/performance-no-wordpress</link>
        <guid isPermaLink="true">http://blini.io/performance-no-wordpress</guid>
        
        
        <category>wordpress</category>
        
        <category>performance</category>
        
      </item>
    
      <item>
        <title>Iniciando com Ionic</title>
        <description>&lt;p&gt;O Ionic é um framework front-end e open-source para desenvolvimento de aplicativos móveis híbridos &lt;em&gt;Cross-Platform&lt;/em&gt; escritos em HTM, CSS e JavaScript.&lt;/p&gt;

&lt;p&gt;Com o Ionic é possível escrever código uma única vez e ter um aplicativo que roda ‘nativamente’ (entre aspas pois não é
100% nativo) no iPhone, Android e Windows Phone. Isso é possível pois estes Sistemas Operacionais Móveis possuem APIs
(&lt;em&gt;Application Program Interface&lt;/em&gt;) usadas para que seus programadores desenvolvam aplicativos nativos para a plataforma.
O que o Ionic faz é, através do &lt;a href=&quot;https://cordova.apache.org/&quot;&gt;&lt;em&gt;Apache Cordova&lt;/em&gt;&lt;/a&gt;, ajudar-nos a comunicarmos com estas APIs que,
por sua vez, comunicam-se com um componente chamado Web View, usado por aplicativos nativos para visualização de páginas web
dentro do contexto dos aplicativos móveis (como um Browser qualquer). O Ionic permite que nosso aplicativo rode embarcado
dentro dessa &lt;em&gt;Web View&lt;/em&gt;, que interpreta e renderiza nosso código HTML, CSS e JavaScript, como qualquer outro navegador moderno.
O Ionic basicamente estiliza nossos componentes HTML para se parecer com os componentes nativos de cada plataforma móvel alvo,
simulando a experiência nativa do usuário final (o que seria um trabalhão fazermos na mão) e usa esse ‘navegador’ para rodar os
aplicativos e disponibiliza bibliotecas JavaScript para acessarmos o hardware e tecnologias nativas do device como câmera, GPS,
Bluetooth, etc (o que também seria um trabalhão pra fazer na mão).&lt;/p&gt;

&lt;p&gt;Como o nome sugere o aplicativo não será nativo, e sim híbrido. O Ionic empacota a aplicação em arquivos instaláveis para cada
plataformas móvel que então pode ser publicado nas principais lojas de aplicativos móveis e ser distribuída para o público-alvo.
Ele também nos oferece excelente produtividade e serviços como o &lt;em&gt;Ionic Platform&lt;/em&gt; que ajuda em tudo que uma aplicação precisa ter
(push notifications, autenticação, etc), Planos Empresariais, e um CLI (&lt;em&gt;Command-line Interface&lt;/em&gt;) que te dá muita produtividade
através de linhas de comando.&lt;/p&gt;

&lt;p&gt;E é claro que, como o código que você vai escrever é puramente HTML, CSS e JavaScript, você poderá rodar e visualizar a aplicação
no seu navegador web preferido. E pra fecharmos o assunto ‘aplicativos híbridos’, com esse mesmo código, excluindo a parte do
Cordova, pode-se criar uma aplicação Desktop &lt;em&gt;Cross-Platform&lt;/em&gt;, com ajuda de tecnologias como o &lt;a href=&quot;http://electron.atom.io/&quot;&gt;Electron&lt;/a&gt;,
que empacota código Web para rodar em Mac, Windows e Linux. O Ionic nos ajuda no mundo Mobile e o Electron no mundo Desktop, e
juntando as duas tecnologias você pode ter uma aplicação 100% híbrida e &lt;em&gt;Cross-Platform&lt;/em&gt; Mobile e Desktop.&lt;/p&gt;

&lt;p&gt;Eu pessoalmente não recomendaria uma abordagem tão híbrida dessa, já que cada plataforma tem suas peculiaridades e algumas vezes
exige nossa atenção especial para criar códigos personalizados. Lembre-se, experiência do usuário em primeiro lugar! Isso foi
apenas para ilustrar o que realmente é uma aplicação híbrida. Entretanto, no mundo Mobile, o Ionic faz o serviço muito bem feito.&lt;/p&gt;

&lt;p&gt;O Ionic é baseado no AngularJs e por isso você irá escrever directivas do Angular no seu HTML e usar os seus módulo: &lt;em&gt;services,
controllers, factories, routes&lt;/em&gt;, etc. No Angular 2 muita coisa mudará e o Ionic 2 está sendo construído em cima dele, porém até
o momento da escrita desse artigo, o Ionic 2 ainda está em fase beta e o Angular 2 em um RC (&lt;em&gt;Release Candidate&lt;/em&gt;) que ainda está
muito instável, por isso a versão 2 será assunto de futuros artigos.&lt;/p&gt;

&lt;h2 id=&quot;preparando-o-ambiente&quot;&gt;Preparando o Ambiente&lt;/h2&gt;

&lt;p&gt;Os softwares e tecnologias necessários para criar aplicativos com o Ionic são os seguintes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Node.js&lt;/strong&gt; - Requerido pelo Ionic para uso do CLI e em tarefas de build&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NPM&lt;/strong&gt; (instalado junto com o Node.js) - Para gerenciarmos nossas dependências&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; - Para o Ionic fazer o scaffolding dos templates iniciais, e também usado pelo Bower&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Bower&lt;/strong&gt; - Para gerenciar nossas dependências no front-end&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cordova e Ionic CLI&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Você também vai precisar de um editor de texto. Eu uso e recomendo o VS Code (https://code.visualstudio.com) que é um excelente fork do Atom com fantático suporte ao JavaScript.
Eu também recomendaria o &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;, porém você pode usar qualquer um de sua preferência.&lt;/p&gt;

&lt;h3 id=&quot;instalando-o-nodejs-e-npm&quot;&gt;Instalando o Node.js e npm&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Acesse o site do Node.js em http://nodejs.org&lt;/li&gt;
  &lt;li&gt;Clique no botão de download para baixar a versão específica para o seu SO&lt;/li&gt;
  &lt;li&gt;Instale o Node.js clicando no instalador baixado&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Isso irá instalar a versão escolhida do Node.js e o NPM.&lt;/p&gt;

&lt;p&gt;Para verificar a instalação, abra o terminal do seu computador e digite:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;node -v&lt;/code&gt; e &lt;code class=&quot;inline&quot;&gt;npm -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Se a instalação foi um sucesso isso retornará a versão instalada de cada um:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/node-npm-version-check.jpg&quot; alt=&quot;Verificando a instalação do Node.js e do npm&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;instalando-o-git&quot;&gt;Instalando o Git&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Acesse a página do Git no site: https://git-scm.com/download&lt;/li&gt;
  &lt;li&gt;Clique no botão de download compatível com o SO da sua máquina&lt;/li&gt;
  &lt;li&gt;Instale o Git clicando no instalador baixado&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Para verificar a instalação do Git, digite no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;git --version&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Isso retornará a versão instalada caso o Git tenha sindo instalado com sucesso.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/git-version-check.jpg&quot; alt=&quot;Verificando a versão do Git instalado&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;instalando-o-bower&quot;&gt;Instalando o Bower&lt;/h3&gt;

&lt;p&gt;O Bower é instaldo através do NPM (&lt;em&gt;Node Package Manager&lt;/em&gt;), o gerenciador de pacotes do Node.js, aquele que é instalado junto com o Node.js.&lt;/p&gt;

&lt;p&gt;Para isso precisamos abrir novamente o terminal e digitar o seguinte comando:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;npm install -g bower&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Esse comando instala o módulo do Node chamado Bower globalmente (&lt;em&gt;-g&lt;/em&gt;). No linux você deve instalar digitando:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;sudo npm install bower&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Mais uma vez, verificando a instalação:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;bower -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/bower-version-check.jpg&quot; alt=&quot;Verificando a instalação do Bower no terminal&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;instalando-o-cordova-e-o-ionic-cli&quot;&gt;Instalando o Cordova e o Ionic CLI&lt;/h3&gt;

&lt;p&gt;O Ionic CLI engloba o Cordova CLI com comandos adicionais, e para isso precisamos também instalar o Cordova globalmente, usaremos
o npm mais uma vez.&lt;/p&gt;

&lt;p&gt;Novamente, nada complicado, abra o terminal e digite:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;npm install -g cordova ionic&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Isso baixará e instalará globalmente em sua máquina o Cordova e o Ionic CLI no mesmo comando. Pode demorar um pouco
dependendo da sua conexão.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/instalando-cordova-e-ionic-cli.jpg&quot; alt=&quot;Instalando Cordova e Ionic CLI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Verifique a instalação digitando no terminal&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;cordova -v&lt;/code&gt; e &lt;code class=&quot;inline&quot;&gt;ionic -v&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/cordova-e-ionic-cli-version-check.jpg&quot; alt=&quot;Verificando a instalação do Cordova e Ionic CLI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Pronto, o Ionic CLI está instalado. Agora podemos digitar ionic no terminal e visualizar os comandos disponíveis para ter uma ideia do que podemos fazer via de linha de comando:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;ionic&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/ionic-cli-commands.jpg&quot; alt=&quot;Visualizando os comandos disponíveis no Ionic CLI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Agora estamos prontos pra continuar!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;iniciando-a-aplicao&quot;&gt;Iniciando a Aplicação&lt;/h2&gt;

&lt;p&gt;O Ionic possui 5 templates disponíveis no GitHub para você iniciar uma aplicação:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Blank&lt;/strong&gt;: Template vazio com apenas uma página.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tabs&lt;/strong&gt;: Aplicação de exemplo usando o sistema de navegação em abas do Ionic.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Side Menu&lt;/strong&gt;: Mesma aplicação de exemplo do Tabs porém, ao invés de abas, um sistema de navegação em menu lateral deslizante.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Maps&lt;/strong&gt;: Template com apenas uma página com um mapa renderizado e Geo Localização codificada.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Sales Force&lt;/strong&gt;: Template com com código integrado à API do CRM da &lt;em&gt;Sales Force&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Para fazer o scaffolding da sua primeira app e rodá-la é muito simples, abra o terminal e digite:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;ionic start -a &quot;Minha App&quot; -i minhaapp minha-app blank&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;onde&quot;&gt;Onde:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;inline&quot;&gt;-a &quot;Minha App&quot;&lt;/code&gt; é o nome amigável do seu aplicativo&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;inline&quot;&gt;-i minhaapp&lt;/code&gt; é o ID aplicativo&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;inline&quot;&gt;minha-app&lt;/code&gt; é o nome da pasta ou o local onde o aplicativo com o template escolhido será gerado&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;inline&quot;&gt;blank&lt;/code&gt; é o template escolhido entre as opções &lt;em&gt;blank&lt;/em&gt;, &lt;em&gt;tabs&lt;/em&gt;, &lt;em&gt;sidemenu&lt;/em&gt;, &lt;em&gt;maps&lt;/em&gt; e &lt;em&gt;salesforce&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ou use a forma reduzida: &lt;code class=&quot;inline&quot;&gt;ionic start minha-app blank&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;onde-1&quot;&gt;Onde:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;inline&quot;&gt;minha-app&lt;/code&gt; é o ID aplicativo&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;inline&quot;&gt;blank&lt;/code&gt; é o template escolhido entre as opções &lt;em&gt;blank&lt;/em&gt;, &lt;em&gt;tabs&lt;/em&gt;, &lt;em&gt;sidemenu&lt;/em&gt;, &lt;em&gt;maps&lt;/em&gt; e &lt;em&gt;salesforce&lt;/em&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;img/initializing-cordova-project.jpg&quot; alt=&quot;Inicializando a aplicação sidemenu do Ionic&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Aguarde um pouquinho, o Ionic irá baixar os arquivos hospedados no GitHub para a sua máquina. Depois da aplicação inicializada e o &lt;em&gt;scaffold&lt;/em&gt; do template feito, acesse a pasta onde o app foi gerado digitando no terminnal:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;cd minha-app&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/acessando-a-pasta.jpg&quot; alt=&quot;Acessando a pasta onde reside o aplicativo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para visualizar o aplicativo é muito simples, lembra que o aplicativo desenvolvido com o Ionic roda embarcado em um navegador?
Pois é, basta levantar um servidor &lt;em&gt;http&lt;/em&gt; e acessar pelo navegador. O Ionic faz isso pra gente automaticamente, basta digitar no terminal:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;ionic serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Com esse comando o Ionic irá levanta um servidor &lt;em&gt;http&lt;/em&gt; na porta 8100 e abrir o navegador padrão do sua máquina com o app rodando.&lt;/p&gt;

&lt;p&gt;Ele ainda mostra alguns comandos úteis no terminal:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/servidor-rodando.jpg&quot; alt=&quot;Servidor rodando na porta 8100 e alguns comandos úteis&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Caso ocorra algum erro, tente rodar em uma porta mais alta, colocando o número da porta no final do comando, assim:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;ionic serve -p 9000&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/ezgif-1287516005-3.gif&quot; alt=&quot;Aplicativo rodando no navegador web&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Para destruir o servidor e destravar o terminal digite:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;inline&quot;&gt;crtl + c&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;No próximo artigo vamos ver um pouco sobre a estrutura dos arquivos e arquitetura do projeto gerado pelo &lt;em&gt;scaffolding&lt;/em&gt; do Ionic
e como personalizar o aplicativo. Assim como configurar as plataformas iOS e Android pra emular nosso aplicativo, rodar o
aplicativo diretamente no celular e usar o &lt;em&gt;Ionic View&lt;/em&gt; para mostrar o aplicativo para os seus clientes e amigos e receber &lt;em&gt;feedbacks&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jun 2016 21:27:00 -0300</pubDate>
        <link>http://blini.io/iniciando-com-ionic</link>
        <guid isPermaLink="true">http://blini.io/iniciando-com-ionic</guid>
        
        
        <category>ionic</category>
        
        <category>javascript</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Aplicativos Móveis com JavaScript: Ionic, React Native e NativeScript. Qual escolher?</title>
        <description>&lt;p&gt;O mundo dos aplicativos móveis é muito diferente do mundo Web. Para nós desenvolvedores Web que quisermos entrar nesse mundo precisamos estar concientes dessas diferenças e algumas complexidades como gerenciamento de memória, concorrências entre threads, deploy nas lojas de aplicativos, experiência do usuário na hora do download/instalação, capacidades de cada plataforma mobile e experiência do usuário são uma delas.&lt;/p&gt;

&lt;p&gt;Felizmente no mundo dos Aplicativos Web Modernos temos visto o surgimento de vários frameworks que nos permitem abstrair todas essas complexidades, focarmos no código e desenvolvermos aplicativos móveis com o que já está em nossa caixa de ferramentas: HTML/XML, CSS e JavaScript. E o PhoneGap/Cordova também está ai pra nos ajudar.&lt;/p&gt;

&lt;p&gt;Em um ecossistema com várias opções qual tecnologia escolher entre as diversas disponíveis do mercado? Vamos analizar três delas aqui:&lt;/p&gt;

&lt;h1 id=&quot;ionic&quot;&gt;Ionic&lt;/h1&gt;

&lt;p&gt;O Ionic é um framework baseado no Angular (um dos mais fortes frameworks de JavaScript do mercado) para desenvolvimento de aplicativos móveis com tecnologias Web. Com o Ionic você consegue desenvolver aplicativos móveis híbridos com HTML, CSS e JavaScript para Android, iOS e Windows Phone.&lt;/p&gt;

&lt;p&gt;Os aplicativos desenvolvidos com Ionic não são nativos mas se parecem e agem como tal, o que o Ionic faz é estilizar o HTML que você escreve para se parecer com os componentes UI nativos de cada plataforma móvel e usa o Apache Cordova para fazer tais componentes se comportarem como nativos comunicando-se com as APIs nativas.&lt;/p&gt;

&lt;p&gt;O ionic foi criado em 2013 pela Drifty, empresa criada por 2 amigos de infância com a missão de facilitar o desenvolvimento Web e mobile e mais tarde viram a grande oportunidade de ajudar desenvolvedores a criar aplicativos móveis &lt;i&gt;Cross-Platform&lt;/i&gt; usando padrões Web modernos, criaram o Ionic e receberam um investimento inicial de $1 milhão pra continuarem o desenvolvimento e hoje o Ionic é mais popular framework de desenvolvimento de aplicativos móveis do mercado com, segundo um dos fundadores, 200 apps sendo criadas com Ionic todos os dias. A comunidade realmente é gigante e você encontra suporte pra qualquer dúvida e bug que surgir durante o desenvolvimento da sua app com uma simples e rápida busca no Google.&lt;/p&gt;

&lt;h3 id=&quot;vantagens&quot;&gt;Vantagens:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Baseado no Angular&lt;/li&gt;
  &lt;li&gt;Write once, run anywhere (escreva uma vez, rode em qualquer lugar).&lt;/li&gt;
  &lt;li&gt;A curva de aprendizagem é muito pequena, você constrói um app com pouco esforço e complexidade&lt;/li&gt;
  &lt;li&gt;Pode visualizar seu aplicativo direto no Browser durante o desenvolvimento sem a necessidade de ficar emulando dispositivos.&lt;/li&gt;
  &lt;li&gt;A comunidade é enorme, você consegue suporte e resolve bugs muito rápido&lt;/li&gt;
  &lt;li&gt;Muito bem documentado e vasto número de tutoriais espalhados pela internet&lt;/li&gt;
  &lt;li&gt;Plano de suporte para times e empresas que ajuda no desenvolvimento, testes, empacotamento, publicacão e distribuição&lt;/li&gt;
  &lt;li&gt;Manutenção de código centralizada já que o código que roda no Android é o mesmo que roda no iOS e Windows Phone&lt;/li&gt;
  &lt;li&gt;Mais leve&lt;/li&gt;
  &lt;li&gt;Ecossistema de ferramentas e serviços como Inonic View, Push Notification, User Authentication, Live Deployment, Native App Package, Ionic Creator, Analytics Service e um CLI para scaffoldind de templates e comandos extremamente úteis na hora do desenvolvimento, testes e distribuição&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;desvantagens&quot;&gt;Desvantagens&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Problemas de performance em alguns ambientes, principalmente em Androids mais antigos&lt;/li&gt;
  &lt;li&gt;Pode apresentar discrepâncias entre componentes UI que você escreve e o que é renderizado na plataforma nativa&lt;/li&gt;
  &lt;li&gt;Não é seguro que funcione bem em 100% dos dispositivos&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;concluso&quot;&gt;Conclusão&lt;/h3&gt;

&lt;p&gt;O ionic é um framework incrível que te permite criar aplicativos móveis incríveis de maneira muito rápida e tem uma comunidade enorme pronta pra te ajudar, o Ionic modifica automaticamente a aparência do app dependendo da plataforma que o usuário está para funcionar de maneira fiel à experiência que o usuário está acostumado. Ele é renderizado e roda embarcado dentro de um navegador (webview) pré-existente no SO dos smartphones e que não é perceptível para o usuário final, rodando como se fosse nativo. &lt;/p&gt;

&lt;p&gt;Por não ser 100% nativo, pode apresentar problemas de performance principalmente em Androids mais antigos (inferiores ao 4.0) com pouco poder de processamento. O que não é um grande problema, no passado essa abordagem era impeditiva, atualmente a diferença de performance comparado ao nativo é mínima porém notável em alguns ambientes. Leve em conta também que hoje em dia cada vez mais vemos celulares munidos com hardware de alta capacidade de processamento que renderiza jogos que muitos computadores desktop não é capaz de renderizar e tecnologias como &lt;a href=&quot;https://crosswalk-project.org/&quot;&gt;CrossWalk Project&lt;/a&gt;, que resolve o problema de performance em webviews em Androids mais antigos. Por esses motivo o Ionic não terá problema nenhum em renderizar um simples aplicativo que usa pouco hardware. Porém, como dito, funciona bem para aplicativos mais simples e de pequeno porte, que usa poucas funcionalidades nativas, onde a performance não é mandatória, ou o prazo desenvolvimento for curto, ou se for para prototipação ou o orçamento é baixo. Vale ressaltar que no Ionic 2 a história é outra, a equipe do Ionic está fazendo um trabalho incrível no Ionic 2 porém a forma de desenvolver será totalmente diferente já que este será baseado no Angular 2.&lt;/p&gt;

&lt;p&gt;*Ionic Framework via Drifty:**&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Free and open source, Ionic offers a library of mobile-optimized HTML, CSS and JS components, gestures, and tools for building highly interactive apps. Built with Sass and optimized for AngularJS.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Site oficial: &lt;a href=&quot;http://ionicframework.com&quot;&gt;http://ionicframework.com&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;react-native&quot;&gt;React Native&lt;/h1&gt;

&lt;p&gt;O React Native é baseado no React, o framework front-end criado pelo Facebook e usado no Facebook. O React é o competidor direto do Angular em relação à popularidade, tutoriais e comunidade. É um excelente framework e muito performático, como pode ser notado usando o Facebook. No React Native não é diferente, os aplicativos desenvolvidos com ele não apresentam problemas de performance já que eles são nativos! O React Native nos permite desenvolver aplicativos móveis com HTML, CSS e JavaScript. O código é compilado pra código nativo (Java, Object-C, Swift) entregando uma experiência nativa ao usuário final.&lt;/p&gt;

&lt;p&gt;Não é uma plataforma de desenvolvimento de aplicativos híbridos. Diferente do Ionic a filosofia do React Native é “learn once, write anywhere” (aprenda uma vez, escreva em qualquer lugar), isso significa que você terá que escrever um código pra iOS e outro para Android, tendo que manter dois códigos diferenrentes, o que implica em maior custo em desenvolvimento e manutenção, o que é compensado na melhor organização de código que o React oferece e pelos aplicativos serem nativos sem gargalos de performance e discrepâncias entre componentes UI que os aplicativos que usam webview apresentam.&lt;/p&gt;

&lt;h3 id=&quot;vantagens-1&quot;&gt;Vantagens:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Tem o Facebook por trás&lt;/li&gt;
  &lt;li&gt;Baseado no React - Grande comuinidade e tutoriais espalhados pela internet&lt;/li&gt;
  &lt;li&gt;Aplicativos com excelente performance no Android e iOS&lt;/li&gt;
  &lt;li&gt;Experiência nativa para o usuário final&lt;/li&gt;
  &lt;li&gt;Manutenção do código facilitada em projetos mais complexos devido à organização do mesmo&lt;/li&gt;
  &lt;li&gt;Roda nativo, você escreve os components UI em React e eles são compilados em componentes UI nativos&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;desvantagens-1&quot;&gt;Desvantagens:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Mais difícil de aprender e começar&lt;/li&gt;
  &lt;li&gt;Não é híbrido. Precisa reescrever o código pra cada plataforma&lt;/li&gt;
  &lt;li&gt;Escrever e manter códigos diferentes para o mesmo aplicativo em iOS e Androidd&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;concluso-1&quot;&gt;Conclusão:&lt;/h3&gt;

&lt;p&gt;O React Native é uma excelente opção, eu o recomendo para aplicativos mais complexos no qual performance é extremamente importante. O getting start dele não é tão simples como o Ionic, a curva de aprendizado é maior, você terá que se esforçar mais dedicando mais tempo no desenvolvimento e aprendizado e instalando SDK’s e configurando o ambiente que ele requer para emular e testar aplicativos no seu computador. Além disso se o seu aplicativo precisa rodar no Android e iOS você terá que escrever dois códigos e depois manter esses dois códigos, na minha opnião isso é o que mais fere a proposta dos aplicativos modernos: O mantra &lt;i&gt;Cross-Platform&lt;/i&gt; “write once, run anywhere”. O react Native ao contrário divulga a proposta “learn once, write anywhere”. O que também não é um grande problema já que não temos muito o que fazer se quisermos aplicativos extremamente otimizados e performáticos para a plataforma alvo.&lt;/p&gt;

&lt;p&gt;Uma introdução do React Native (em inglês): &lt;a href=&quot;https://www.youtube.com/watch?v=KVZ-P-ZI6W4&quot;&gt;https://www.youtube.com/watch?v=KVZ-P-ZI6W4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;React Native via time do React Native&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;React Native enables you to build world-class application experiences on native platforms using a consistent developer experience based on JavaScript and React. The focus of React Native is on developer efficiency across all the platforms you care about — learn once, write anywhere. Facebook uses React Native in multiple production apps and will continue investing in React Native.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Site oficial: &lt;a href=&quot;https://facebook.github.io/react-native/&quot;&gt;https://facebook.github.io/react-native/&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;nativescript&quot;&gt;NativeScript&lt;/h1&gt;

&lt;p&gt;O NativeScript é um framework &lt;i&gt;Cross-Platform&lt;/i&gt; que une, na minha opnião, o melhor dos dois concorrentes acima: O mantra “write once, run anywhere” do Ionic e a compilação pra código nativo do React Native. Isso significa que com o NativeScript você escreverá um único código com tecnologias Web e ele compilará esse único código para código nativo para iOS, Android e Windows Phone. Ele oferece todas as vantagens de ter um app nativo como performance e experiência do usuário escrevendo e mantendo um único código com JavaScript! Mazing!&lt;/p&gt;

&lt;p&gt;A única diferença que pode ser um ponto negativo é que ele não usam HTML, ao invés disso você terá que escrever suas views em XML. O que mais uma vez não é um grande problema pois as tags XML são tags parecidas com as do HTML e nós como desenvolvedores estamos acostumados com XML.&lt;/p&gt;

&lt;p&gt;O time de desenvolvimento do NativeScript foi formado em 2010 dentro da Tekerik inicialmente para desenvolvimento de components nativos para ser usados em aplicativos para o Windows Phone 7 que acabara de ser lançado. Após vários aplicativos lançados usando os componentes criados por eles, eles partiram para iOS e Android e identificaram a necessidade que as empresas e programadores têm em desenvolver o mesmo aplicativo para iOS, Android e Windows Phone gerando três códigos que fazem a mesma coisa aumentando e muito o custo de desenvolvimento, manutenção e evolução dos códigos que existiam pra resolver o mesmíssimo problema.&lt;/p&gt;

&lt;p&gt;A necessidade era escrever e manter um único código para criar aplicativos móveis nativos para serem disponibilizados na três maiores lojas de aplicativos sem comprometer a experiência do usuário. No meio de 2014 eles lançaram o NativeScript com a proposta de atender essa necessidade.&lt;/p&gt;

&lt;h3 id=&quot;vantagens-2&quot;&gt;Vantagens:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Write once, run everywhere. Escreva uma vez rode em qualquer lugar nativamente!&lt;/li&gt;
  &lt;li&gt;CLI para scaffoldind de templates e comandos extremamente úteis na hora do desenvolvimento, testes e distribuição&lt;/li&gt;
  &lt;li&gt;App nativa sem problema de performance&lt;/li&gt;
  &lt;li&gt;Preserva a experiência nativa do usuário&lt;/li&gt;
  &lt;li&gt;Compila JavaScript para código nativo em iOS e Android (Windows Phone em breve)&lt;/li&gt;
  &lt;li&gt;Pode ser usado com Angular2 junto com TypeScript ou apenas em JavaScript Puro&lt;/li&gt;
  &lt;li&gt;Manutenção e suporte em apenas um único código&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;desvantagens-2&quot;&gt;Desvantagens&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Projeto relativamente novo, comunidade relativamente pequena&lt;/li&gt;
  &lt;li&gt;Poucos tutorias, casos de uso e issues no Github e Stack Overflow&lt;/li&gt;
  &lt;li&gt;Mercado ainda pequeno&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;concluso-2&quot;&gt;Conclusão:&lt;/h3&gt;

&lt;p&gt;Manter mais de um código para o mesmo aplicativo não é muito produtivo e requer mais investimento em tecnologia, IDE, conhecimento, sistemas operacionais e APIs e mesmo assim, devido à necessidade de manter diversos códigos, muitas vezes aplicativos que deveriam se comportar da mesma maneira nas diferentes plataformas acabam tendo versões e funcionalidades diferentes.&lt;/p&gt;

&lt;p&gt;O NativeScript possibilita publicarmos aplicativos móveis nativos nas três principais lojas de aplicativos escrevendo código com tecnologias web (XML, JavaScript e CSS) sem comprometermos a experiências nativa dos nosssos usuários, cada um em sua plataforma. O código será o mesmo para os três aplicativos. Ganhamos assim produtividade, eliminados tempo, custos e complexidade na detecção e suporte em bugs, erros e evolução do aplicativo em todas as plataformas.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NativeScript via Telerik:&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NativeScript enables developers to build native apps for iOS and Android while sharing the application code across the platforms. When building the application UI, developers use our libraries, which abstract the differences between the native platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Site oficial: &lt;a href=&quot;http://www.telerik.com/nativescript&quot;&gt;http://www.telerik.com/nativescript&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Conferência do time do NativeScript na TelerikNEXT: &lt;a href=&quot;https://www.youtube.com/watch?v=HWboi_9aba8&quot;&gt;https://www.youtube.com/watch?v=HWboi_9aba8&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Jun 2016 19:48:00 -0300</pubDate>
        <link>http://blini.io/aplicativos-moveis-com-javascript-ionic-react-native-e-nativescript</link>
        <guid isPermaLink="true">http://blini.io/aplicativos-moveis-com-javascript-ionic-react-native-e-nativescript</guid>
        
        
        <category>ionic</category>
        
        <category>javascript</category>
        
        <category>nativescript</category>
        
        <category>react native</category>
        
      </item>
    
  </channel>
</rss>
